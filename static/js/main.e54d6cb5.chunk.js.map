{"version":3,"sources":["components/header.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","title","height","width","style","href","target","class","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qLAEqBA,E,iLAEb,OACI,4BAAQC,UAAU,UACd,yBAAKA,UAAU,aACX,yBAAKA,UAAU,yCAAyCC,IAAI,4BAA4BC,IAAI,+CAA+CC,MAAM,+CAA+CC,OAAO,MAAMC,MAAM,MAAMC,MAAM,2EAC/N,yBAAKN,UAAU,6BACX,wBAAIA,UAAU,QAAd,eACA,wBAAIA,UAAU,QAAd,sBACA,wBAAIA,UAAU,sBACV,4BAAI,uBAAGO,KAAK,iEAAiEC,OAAO,SAASL,MAAM,6CAA4C,uBAAGM,MAAM,2BACxJ,4BAAI,uBAAGF,KAAK,mCAAmCC,OAAO,SAASL,MAAM,iCAAgC,uBAAGM,MAAM,mBAC9G,4BAAI,uBAAGF,KAAK,wCAAwCC,OAAO,SAASL,MAAM,+BAA8B,uBAAGM,MAAM,iBACjH,4BAAI,uBAAGF,KAAK,0CAA0CC,OAAO,SAASL,MAAM,mCAAkC,uBAAGM,MAAM,qBACvH,4BAAI,uBAAGF,KAAK,0CAA0CC,OAAO,SAASL,MAAM,mCAAkC,uBAAGM,MAAM,qBACvH,4BAAI,uBAAGF,KAAK,yCAAyCC,OAAO,SAASL,MAAM,oCAAmC,uBAAGM,MAAM,wBAI/H,yBAAKT,UAAU,cACX,uBAAGA,UAAU,sBAAsBO,KAAK,+BAA+BC,OAAO,SAASL,MAAM,iCAAgC,uBAAGM,MAAM,sBAAtI,SADJ,OAEI,uBAAGT,UAAU,eAAeO,KAAK,2BAA2BJ,MAAM,mCAAkC,uBAAGM,MAAM,gBAA7G,gB,GArBYC,aCSrBC,MARf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,QCMcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e54d6cb5.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Header extends Component {\n    render() {\n        return (\n            <header className=\"header\">\n                <div className=\"container\">\n                    <img className=\"profile-image img-responsive pull-left\" src=\"assets/images/profile.jpg\" alt=\"Portfolio | Rohan Khude - Back-end Developer\" title=\"Portfolio | Rohan Khude - Back-end Developer\" height=\"200\" width=\"200\" style=\"box-shadow: 0px 0px 10px #888; border-radius: 100px 100px 100px 100px;\" />\n                    <div className=\"profile-content pull-left\">\n                        <h1 className=\"name\">Rohan Khude</h1>\n                        <h2 className=\"desc\">Back-end Developer</h2>\n                        <ul className=\"social list-inline\">\n                            <li><a href=\"http://stackoverflow.com/users/4635388/rohan-khude?tab=profile\" target=\"_blank\" title=\"View StackOverflow profile of Rohan Khude\"><i class=\"fa fa-stack-overflow\"></i></a></li>\n                            <li><a href=\"https://github.com/rohankhudedev\" target=\"_blank\" title=\"Github account of Rohan Khude\"><i class=\"fa fa-github\"></i></a></li>\n                            <li><a href=\"https://gist.github.com/rohankhudedev\" target=\"_blank\" title=\"Gist account of Rohan Khude\"><i class=\"fa fa-code\"></i></a></li>\n                            <li><a href=\"https://www.linkedin.com/in/rohankhude/\" target=\"_blank\" title=\"Linkedin Profile of Rohan Khude\"><i class=\"fa fa-linkedin\"></i></a></li>\n                            <li><a href=\"https://www.facebook.com/rohan.khude.75\" target=\"_blank\" title=\"Facebook profile of Rohan Khude\"><i class=\"fa fa-facebook\"></i></a></li>\n                            <li><a href=\"https://www.instagram.com/rohan.khude/\" target=\"_blank\" title=\"Instagram profile of Rohan Khude\"><i class=\"fa fa-instagram\"></i></a></li>\n                        </ul>\n                    </div>\n                    \n                    <div className=\"pull-right\">\n                        <a className=\"btn btn-cta-primary\" href=\"mailto:rohanrkhude@gmail.com\" target=\"_blank\" title=\"Mail to rohanrkhude@gmail.com\"><i class=\"fa fa-paper-plane\"></i> Mail</a>&nbsp;\n                        <a className=\"btn btn-info\" href=\"skype:rohan_khude_r?chat\" title=\"Contact Rohan Khude using Skype\"><i class=\"fa fa-skype\"></i> CHAT</a>\n                    </div>\n                </div>\n            </header>\n        )\n    }\n}","import React from 'react'\nimport Header from './components/header'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}